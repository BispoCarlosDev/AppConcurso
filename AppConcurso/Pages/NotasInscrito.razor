@page "/notas"
@using AppConcurso.Models;
@using AppConcurso.Controllers;
@inject InscricaoController inscControl;
@inject CargoController cargoControl;
@inject CandidatoController candControl;
@inject NavigationManager navegacao;


<h3>NOTAS DOS CANDIDATOS</h3>

<div class="container">
    <nav class="navbar navbar-light" style="background-color: white"></nav>

    <nav class="navbar navbar-light" style="background-color: darkgreen"></nav>
    <label for="veiculo" class="form-label">CARGOS:</label>
    <select @onchange="SelecionarCargos" class="form-select" aria-label="Selecione um Cargo">
        <option selected>Selecione uma placa</option>
        @foreach (var item in listaCargos)
        {
            <option value=@item.Id>@item.NomeCargo</option>
        }
    </select>

    <nav class="navbar navbar-light" style="background-color: white"></nav>

    <nav class="navbar navbar-light" style="background-color: darkgreen"></nav>
    <table class="table">
        <thead>
            <tr>
                <th>NOME</th>
                <th>NOTA CONH. GERAIS</th>
                <th>NOTA CONH. ESPECIFÍCOS</th>
                <th>MÉDIA</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in listaInscritos)
            {
                decimal media = (forecast.NotaConhGerais + forecast.NotaConhEspecificos);
                media = media / 2;
                <tr>
                    <td>@forecast.Candidato.Nome</td>
                    <td><input @bind="forecast.NotaConhGerais" type="number" class="form-control" id="pontos"></td>
                    <td><input @bind="forecast.NotaConhEspecificos" type="number" class="form-control" id="pontos"></td>
                    <td>@media</td>
                </tr>
            }
        </tbody>
    </table>

    <nav class="navbar navbar-light" style="background-color: white"></nav>

    <nav class="navbar navbar-light" style="background-color: darkgreen"></nav>

    <nav class="navbar navbar-light" style="background-color: white"></nav>
    @if (enabledButton)
    {
        <button type="button" class="btn btn-warning" @onclick="Cancelar">CANCELAR</button>
        <button type="button" class="btn btn-success" @onclick="Salvar">SALVAR</button>
    }
    else
    {
        <div class="alert alert-success" role="alert">
            Notas lançadas com sucesso!
        </div>
        <button type="button" class="btn btn-primary" @onclick="NovaEdicao">LANÇAR OU EDITAR NOVAS NOTAS</button>
    }
</div>

@code {
    private List<Cargo> listaCargos = new List<Cargo>();
    private List<Candidato> listaCandidatos = new List<Candidato>();
    private List<Inscricao> listaInscritos = new List<Inscricao>();

    private Cargo cargo = new Cargo();
    private Candidato candidato = new Candidato();

    private bool enabledButton = true;
    private int numeroInsc = 0;

    protected override async Task OnInitializedAsync()
    {
        var listaCarg = await cargoControl.ListaCargosIncludeCandidato();
        listaCargos = listaCarg;

    }

    private async Task Salvar()
    {
        await inscControl.UpdateRange(listaInscritos);
        await inscControl.Salvar();
        enabledButton = false;
    }

    private void Cancelar()
    {
        navegacao.NavigateTo("/notas", forceLoad: true);
    }

    public void SelecionarCargos(ChangeEventArgs e)
    {
        int id = Convert.ToInt32(e.Value.ToString());
        if (id > 0)
        {
            //Seleciona uma pessoa específica para registrar os bens
            var cargo = listaCargos.Where(p => p.Id == id).FirstOrDefault();

            if (cargo.Inscricoes != null)
            {
                listaInscritos = cargo.Inscricoes;
            }
        }
    }

    public void NovaEdicao()
    {
        navegacao.NavigateTo("/notas", forceLoad: true);
    }
}
